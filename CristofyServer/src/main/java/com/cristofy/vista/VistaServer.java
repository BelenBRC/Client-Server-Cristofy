package com.cristofy.vista;

import java.awt.Color;
import java.io.IOException;

import javax.swing.JOptionPane;

import com.cristofy.servidor.CristofyServer;

/**
 * @brief   Clase que maneja la vista del servidor
 * @author belen
 */
public class VistaServer extends javax.swing.JFrame {
    private CristofyServer server;

    /**
     * @throws Exception 
     * @brief   Constructor por defecto de la clase VistaServer
     */
    public VistaServer() throws Exception {
        initComponents();
        setServer(new CristofyServer());
    }

    // Getters y Setters

    /**
     * @brief   Método que devuelve el servidor
     * @return  Servidor
     */
    public CristofyServer getServer() {
        return server;
    }

    /**
     * @brief   Método que establece el servidor
     * @param   server Servidor
     */
    public void setServer(CristofyServer server) {
        this.server = server;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonOnOff = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaMensajesCliente = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeWindow(evt);
            }
        });

        buttonOnOff.setBackground(new java.awt.Color(255, 0, 0));
        buttonOnOff.setForeground(new java.awt.Color(0, 0, 0));
        buttonOnOff.setText("OFF");
        buttonOnOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOnOffActionPerformed(evt);
            }
        });

        jTextAreaMensajesCliente.setColumns(20);
        jTextAreaMensajesCliente.setRows(5);
        jScrollPane1.setViewportView(jTextAreaMensajesCliente);

        jTextField1.setText("6969");

        jLabel1.setText("Puerto:");

        jButton1.setText("Ver usuarios conectados");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 695, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buttonOnOff, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(316, 316, 316))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(277, 277, 277))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addComponent(buttonOnOff, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @brief   Método que maneja el evento de presionar el botón de encendido/apagado
     * @param   evt Evento de presionar el botón de encendido/apagado
     */
    private void buttonOnOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOnOffActionPerformed
        if(buttonOnOff.getText().equals("OFF")){
            buttonOnOff.setText("ON");
            //Limpiar el área de texto
            jTextAreaMensajesCliente.setText("");
            jTextAreaMensajesCliente.append("\nServidor iniciado en el puerto " + jTextField1.getText() + "\n");
            try {
                getServer().setPortNumber(Integer.parseInt(jTextField1.getText()));
                getServer().setListening(true);
                getServer().setTextArea(jTextAreaMensajesCliente);
                getServer().ejecutarServer();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al iniciar el servidor", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else{
            buttonOnOff.setText("OFF");
            buttonOnOff.setBackground(new Color(255, 0, 0));

            //Limpiar el área de texto
            jTextAreaMensajesCliente.setText("");

            jTextAreaMensajesCliente.append("\nServidor cerrado\n\n");
            try {
                getServer().setListening(false);
                getServer().cerrarServer();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al cerrar el servidor", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_buttonOnOffActionPerformed

    private void closeWindow(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeWindow
        try {
            getServer().setListening(false);
            getServer().cerrarServer();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al cerrar el servidor", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_closeWindow

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jTextAreaMensajesCliente.setText(jTextAreaMensajesCliente.getText() + "\nUsuarios conectados: \n");
        for(int i =0; i <  getServer().getClientes().clientes.size(); i++){
            jTextAreaMensajesCliente.setText(jTextAreaMensajesCliente.getText() + "Cliente " + i+1 + " conectado:\t" + getServer().getClientes().clientes.get(i).getProtocolo().perfil.getLogin() + "\tIP: " + getServer().getClientes().clientes.get(i).getSocket().getInetAddress());
            jTextAreaMensajesCliente.setText(jTextAreaMensajesCliente.getText() + "\n");
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton buttonOnOff;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaMensajesCliente;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
